@page "/weather"
@using GabrieleMessina.Web.Api
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@rendermode InteractiveServer

@inject WeatherForecastApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<div class="d-flex justify-content-between">
    <div>
        <h1>Weather</h1>
        <p>This component show data loaded from a backend API service.</p>
    </div>
    <div>
        <button class="btn btn-primary" @onclick="AddForecast">Add random forecast</button>
    </div>
</div>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToString("D")</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    private ILogger<Weather> logger { get; set; } = default!;

    private ICollection<WeatherForecast>? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        _forecasts = await WeatherApi.GetAllWeatherForecastsAsync();
    }

    private async Task AddForecast()
    {
        logger.LogInformation("Adding a new forecast");
        var newForecast = await WeatherApi.CreateWeatherForecastAsync(new WeatherForecast(DateTimeOffset.Now, (int)(Random.Shared.NextInt64() % 64), "Lorem ipsum"));
        _forecasts?.Add(newForecast);
    }
}
